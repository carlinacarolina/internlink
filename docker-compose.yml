services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: internlink_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-internlink}
      POSTGRES_USER: ${DB_USERNAME:-internlink}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5433}:5432"
    networks:
      - internlink_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-internlink} -d ${DB_DATABASE:-internlink}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: internlink_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - internlink_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Laravel Application
  app:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
      target: development
      args:
        ENABLE_REDIS_EXTENSION: ${ENABLE_REDIS_EXTENSION:-1}
        REDIS_EXT_VERSION: ${REDIS_EXT_VERSION:-6.0.2}
        INSTALL_COMPOSER_DEPENDENCIES: ${INSTALL_COMPOSER_DEPENDENCIES:-1}
        INSTALL_NODE_DEPENDENCIES: ${INSTALL_NODE_DEPENDENCIES:-1}
    container_name: internlink_app
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV:-local}
      - APP_DEBUG=${APP_DEBUG:-true}
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE:-internlink}
      - DB_USERNAME=${DB_USERNAME:-internlink}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - PUPPETEER_CACHE_DIR=/home/www-data/.cache/puppeteer
      - BROWSERSHOT_CHROME_PATH=/usr/bin/chromium-browser
    volumes:
      - .:/var/www/html
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    ports:
      - "${APP_PORT:-8000}:80"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - internlink_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js for Asset Building (Development)
  node:
    build:
      context: .
      dockerfile: docker/node/Dockerfile
    container_name: internlink_node
    restart: unless-stopped
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "${VITE_PORT:-5173}:5173"
    networks:
      - internlink_network
    profiles:
      - development

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
      target: development
      args:
        ENABLE_REDIS_EXTENSION: ${ENABLE_REDIS_EXTENSION:-1}
        REDIS_EXT_VERSION: ${REDIS_EXT_VERSION:-6.0.2}
        INSTALL_COMPOSER_DEPENDENCIES: ${INSTALL_COMPOSER_DEPENDENCIES:-1}
        INSTALL_NODE_DEPENDENCIES: ${INSTALL_NODE_DEPENDENCIES:-1}
    container_name: internlink_queue
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV:-local}
      - APP_DEBUG=${APP_DEBUG:-true}
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE:-internlink}
      - DB_USERNAME=${DB_USERNAME:-internlink}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis
    volumes:
      - .:/var/www/html
      - ./storage:/var/www/html/storage
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - internlink_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  internlink_network:
    driver: bridge
